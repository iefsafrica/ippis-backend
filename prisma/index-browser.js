
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.17.1
 * Query Engine version: 272a37d34178c2894197e17273bf937f25acdeac
 */
Prisma.prismaVersion = {
  client: "6.17.1",
  engine: "272a37d34178c2894197e17273bf937f25acdeac"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.Admin_permissionsScalarFieldEnum = {
  id: 'id',
  role: 'role',
  resource: 'resource',
  action: 'action',
  is_allowed: 'is_allowed',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Admin_sessionsScalarFieldEnum = {
  id: 'id',
  admin_id: 'admin_id',
  session_token: 'session_token',
  expires_at: 'expires_at',
  created_at: 'created_at',
  ip_address: 'ip_address',
  user_agent: 'user_agent'
};

exports.Prisma.Admin_usersScalarFieldEnum = {
  id: 'id',
  username: 'username',
  email: 'email',
  password_hash: 'password_hash',
  full_name: 'full_name',
  role: 'role',
  is_active: 'is_active',
  last_login: 'last_login',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Dashboard_notificationsScalarFieldEnum = {
  id: 'id',
  title: 'title',
  message: 'message',
  type: 'type',
  is_read: 'is_read',
  recipient_id: 'recipient_id',
  created_at: 'created_at',
  expires_at: 'expires_at',
  action_url: 'action_url'
};

exports.Prisma.Dashboard_widgetsScalarFieldEnum = {
  id: 'id',
  admin_id: 'admin_id',
  widget_type: 'widget_type',
  widget_position: 'widget_position',
  widget_size: 'widget_size',
  widget_config: 'widget_config',
  is_visible: 'is_visible',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Document_uploadsScalarFieldEnum = {
  id: 'id',
  registration_id: 'registration_id',
  appointment_letter_path: 'appointment_letter_path',
  educational_certificates_path: 'educational_certificates_path',
  promotion_letter_path: 'promotion_letter_path',
  other_documents_path: 'other_documents_path',
  profile_image_path: 'profile_image_path',
  signature_path: 'signature_path',
  upload_date: 'upload_date',
  status: 'status'
};

exports.Prisma.EmployeesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  department: 'department',
  position: 'position',
  status: 'status',
  join_date: 'join_date',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Employment_infoScalarFieldEnum = {
  id: 'id',
  registration_id: 'registration_id',
  employment_id_no: 'employment_id_no',
  service_no: 'service_no',
  file_no: 'file_no',
  rank_position: 'rank_position',
  department: 'department',
  organization: 'organization',
  employment_type: 'employment_type',
  probation_period: 'probation_period',
  work_location: 'work_location',
  date_of_first_appointment: 'date_of_first_appointment',
  gl: 'gl',
  step: 'step',
  salary_structure: 'salary_structure',
  cadre: 'cadre',
  name_of_bank: 'name_of_bank',
  account_number: 'account_number',
  pfa_name: 'pfa_name',
  rsapin: 'rsapin',
  educational_background: 'educational_background',
  certifications: 'certifications'
};

exports.Prisma.Password_reset_tokensScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  token: 'token',
  expires_at: 'expires_at',
  created_at: 'created_at'
};

exports.Prisma.Pending_employeesScalarFieldEnum = {
  id: 'id',
  registration_id: 'registration_id',
  surname: 'surname',
  firstname: 'firstname',
  email: 'email',
  department: 'department',
  position: 'position',
  status: 'status',
  source: 'source',
  submission_date: 'submission_date',
  created_at: 'created_at',
  updated_at: 'updated_at',
  missing_fields: 'missing_fields',
  metadata: 'metadata'
};

exports.Prisma.Personal_infoScalarFieldEnum = {
  id: 'id',
  registration_id: 'registration_id',
  title: 'title',
  surname: 'surname',
  first_name: 'first_name',
  other_names: 'other_names',
  phone_number: 'phone_number',
  email: 'email',
  date_of_birth: 'date_of_birth',
  sex: 'sex',
  marital_status: 'marital_status',
  state_of_origin: 'state_of_origin',
  lga: 'lga',
  state_of_residence: 'state_of_residence',
  address_state_of_residence: 'address_state_of_residence',
  next_of_kin_name: 'next_of_kin_name',
  next_of_kin_relationship: 'next_of_kin_relationship',
  next_of_kin_phone_number: 'next_of_kin_phone_number',
  next_of_kin_address: 'next_of_kin_address'
};

exports.Prisma.Registration_commentsScalarFieldEnum = {
  id: 'id',
  registration_id: 'registration_id',
  comment_text: 'comment_text',
  author: 'author',
  created_at: 'created_at'
};

exports.Prisma.Registration_historyScalarFieldEnum = {
  id: 'id',
  registration_id: 'registration_id',
  action: 'action',
  details: 'details',
  performed_by: 'performed_by',
  performed_at: 'performed_at'
};

exports.Prisma.RegistrationsScalarFieldEnum = {
  id: 'id',
  registration_Id: 'registration_Id',
  nin: 'nin',
  status: 'status',
  current_step: 'current_step',
  declaration: 'declaration',
  created_at: 'created_at',
  updated_at: 'updated_at',
  submitted_at: 'submitted_at',
  approved_at: 'approved_at',
  rejected_at: 'rejected_at'
};

exports.Prisma.VerificationDataScalarFieldEnum = {
  id: 'id',
  nin: 'nin',
  vnin: 'vnin',
  title: 'title',
  surname: 'surname',
  email: 'email',
  gender: 'gender',
  state_of_origin: 'state_of_origin',
  religion: 'religion',
  profession: 'profession',
  residence_address: 'residence_address',
  residence_lga: 'residence_lga',
  residence_state: 'residence_state',
  nok_surname: 'nok_surname',
  nok_lga: 'nok_lga',
  nok_state: 'nok_state',
  nok_town: 'nok_town',
  maiden_name: 'maiden_name',
  tracking_id: 'tracking_id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  birthcountry: 'birthcountry',
  birthdate: 'birthdate',
  birthlga: 'birthlga',
  birthstate: 'birthstate',
  central_iD: 'central_iD',
  educationallevel: 'educationallevel',
  employmentstatus: 'employmentstatus',
  firstname: 'firstname',
  heigth: 'heigth',
  lga_origin: 'lga_origin',
  maritalstatus: 'maritalstatus',
  middlename: 'middlename',
  nok_address1: 'nok_address1',
  nok_address2: 'nok_address2',
  nok_firstname: 'nok_firstname',
  nok_middlename: 'nok_middlename',
  nok_postalcode: 'nok_postalcode',
  nspokenlang: 'nspokenlang',
  ospokenlang: 'ospokenlang',
  pfirstname: 'pfirstname',
  photo: 'photo',
  pmiddlename: 'pmiddlename',
  psurname: 'psurname',
  residence_AdressLine1: 'residence_AdressLine1',
  residence_Town: 'residence_Town',
  residencestatus: 'residencestatus',
  self_origin_lga: 'self_origin_lga',
  self_origin_place: 'self_origin_place',
  self_origin_state: 'self_origin_state',
  signature: 'signature',
  spoken_language: 'spoken_language',
  telephoneno: 'telephoneno',
  userid: 'userid',
  registration_id: 'registration_id'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  accountName: 'accountName',
  accountNumber: 'accountNumber',
  bankName: 'bankName',
  accountType: 'accountType',
  currency: 'currency',
  balance: 'balance',
  openingDate: 'openingDate',
  status: 'status',
  branchCode: 'branchCode',
  swiftCode: 'swiftCode',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  previousBalance: 'previousBalance'
};

exports.Prisma.Employee_paymentsScalarFieldEnum = {
  id: 'id',
  employee_id: 'employee_id',
  payment_type: 'payment_type',
  payment_method: 'payment_method',
  payment_date: 'payment_date',
  basic_salary: 'basic_salary',
  house_rent_allowance: 'house_rent_allowance',
  medical_allowance: 'medical_allowance',
  travel_allowance: 'travel_allowance',
  dearness_allowance: 'dearness_allowance',
  provident_fund: 'provident_fund',
  income_tax: 'income_tax',
  health_insurance: 'health_insurance',
  loan_deduction: 'loan_deduction',
  comments: 'comments',
  created_at: 'created_at'
};

exports.Prisma.Salary_budgetScalarFieldEnum = {
  id: 'id',
  staff_id: 'staff_id',
  legacy_id: 'legacy_id',
  full_name: 'full_name',
  job_title: 'job_title',
  command: 'command',
  zone: 'zone',
  location: 'location',
  unit: 'unit',
  reference_id: 'reference_id',
  grade: 'grade',
  grade_step: 'grade_step',
  bank_name: 'bank_name',
  account_number: 'account_number',
  pension_administrator: 'pension_administrator',
  pension_pin: 'pension_pin',
  tax: 'tax',
  created_at: 'created_at',
  updated_at: 'updated_at',
  tax_id: 'tax_id',
  basic_non_salary: 'basic_non_salary',
  basic_salary: 'basic_salary',
  conhess_shift_allowance: 'conhess_shift_allowance',
  conmess_call_duty: 'conmess_call_duty',
  conmess_minimum_wage: 'conmess_minimum_wage',
  conmess_non_clinical: 'conmess_non_clinical',
  conposs_minimum_wage: 'conposs_minimum_wage',
  conpss_minimum_wage: 'conpss_minimum_wage',
  conpss_peculiar: 'conpss_peculiar'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};


exports.Prisma.ModelName = {
  admin_permissions: 'admin_permissions',
  admin_sessions: 'admin_sessions',
  admin_users: 'admin_users',
  dashboard_notifications: 'dashboard_notifications',
  dashboard_widgets: 'dashboard_widgets',
  document_uploads: 'document_uploads',
  employees: 'employees',
  employment_info: 'employment_info',
  password_reset_tokens: 'password_reset_tokens',
  pending_employees: 'pending_employees',
  personal_info: 'personal_info',
  registration_comments: 'registration_comments',
  registration_history: 'registration_history',
  registrations: 'registrations',
  VerificationData: 'VerificationData',
  Account: 'Account',
  employee_payments: 'employee_payments',
  salary_budget: 'salary_budget'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
